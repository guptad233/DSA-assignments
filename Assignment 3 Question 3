
#include <stdio.h>
#include <string.h>
#define MAX_SIZE 1000

typedef struct {
    char data[MAX_SIZE];
    int top;
} CharStack;

void initStack(CharStack* stack) {
    stack->top = -1;
}

int isEmpty(CharStack* stack) {
    return stack->top == -1;
}

int isFull(CharStack* stack) {
    return stack->top == MAX_SIZE - 1;
}

void push(CharStack* stack, char ch) {
    if (!isFull(stack)) {
        stack->data[++stack->top] = ch;
    }
}

char pop(CharStack* stack) {
    if (!isEmpty(stack)) {
        return stack->data[stack->top--];
    }
    return '\0';
}

char peek(CharStack* stack) {
    if (!isEmpty(stack)) {
        return stack->data[stack->top];
    }
    return '\0';
}

int isOpeningBracket(char ch) {
    return (ch == '(' || ch == '[' || ch == '{');
}

int isClosingBracket(char ch) {
    return (ch == ')' || ch == ']' || ch == '}');
}

int isMatchingPair(char opening, char closing) {
    return ((opening == '(' && closing == ')') ||
            (opening == '[' && closing == ']') ||
            (opening == '{' && closing == '}'));
}

int isBalanced(char expression[]) {
    CharStack stack;
    initStack(&stack);
    int len = strlen(expression);
    
    for (int i = 0; i < len; i++) {
        char ch = expression[i];
        
        if (isOpeningBracket(ch)) {
            push(&stack, ch);
        }
        else if (isClosingBracket(ch)) {
            if (isEmpty(&stack)) {
                return 0;
            }
            char top = pop(&stack);
            if (!isMatchingPair(top, ch)) {
                return 0;
            }
        }
    }
    
    return isEmpty(&stack);
}

int main() {
    char expression[MAX_SIZE];
    
    printf("Enter an expression: ");
    scanf("%s", expression);
    
    if (isBalanced(expression)) {
        printf("The expression '%s' has balanced parentheses.\n", expression);
    } else {
        printf("The expression '%s' does not have balanced parentheses.\n", expression);
    }
    
    
    return 0;
}
